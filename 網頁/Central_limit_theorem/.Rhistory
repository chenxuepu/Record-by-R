shiny::runApp()
shiny::runApp()
runApp('C:/Users/USER/Desktop/Basic_Probability/law_of_large_number')
runApp('C:/Users/USER/Desktop/Basic_Probability/law_of_large_number')
x<-rnorm(10000,mean=0,sd=9)
mean(x)
x<-rnorm(10000,mean=0,sd=9)
mean(x)
x<-rnorm(100000,mean=0,sd=9)
mean(x)
mean((x-mean(x))^2)
shiny::runApp('C:/Users/USER/Desktop/Basic_Probability/law_of_large_number')
x<-matrix(rnorm(100000,mean=0,sd=9),100,1000)
apply(x,2,mean)
apply(x,2,mean((x-mean(x))^2))
var<-function(x){
y<-mean((x-mean(x))^2)
return(y)
}
apply(x,2,var)
data=data.frame(x=apply(x,2,var))
ggplot(data=data, aes(x = x))+geom_histogram(aes(y=..density..),bins=20,colour="black", fill="white") +geom_density(alpha=.2, fill="#000000")
plot1<-ggplot(data=data, aes(x = x))+geom_histogram(aes(y=..density..),bins=20,colour="black", fill="white") +geom_density(alpha=.2, fill="#000000")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
data=data.frame(x=apply(x,2,mean))
plot2<-ggplot(data=data, aes(x = x))+geom_histogram(aes(y=..density..),bins=20,colour="black", fill="white") +geom_density(alpha=.2, fill="#000000")
multiplot(plot1,plot2)
runApp()
plot2
plot2+annotate("text", x= Inf, y= Inf,label=mu,hjust=1,vjust=1,size=5)
plot2+annotate("text", x= Inf, y= Inf,label="mu",hjust=1,vjust=1,size=5)
2
plot2+annotate("text", x= Inf, y= Inf,label="mu",hjust=2,vjust=2,size=5)
plot2+annotate("text", x= Inf, y= Inf,label="mu",hjust=2,vjust=2,size=7)
runApp()
runApp()
data=data.frame(x=apply(x,2,mean))
plot2<-ggplot(data=data, aes(x = x))+geom_histogram(aes(y=..density..),bins=20,colour="black", fill="white") +geom_density(alpha=.2, fill="#000000")
z<-function(x){
y<-dnorm(x,0,9)
return(y)
}
plot2+stat_function(fun=z)
data=data.frame(x=apply(x,2,mean))
plot2<-ggplot(data=data, aes(x = x))+geom_histogram(aes(y=..density..),bins=20,colour="black", fill="white") +geom_density(alpha=.2, fill="#000000")
x<-matrix(rnorm(100000,mean=0,sd=9),100,1000)
data=data.frame(x=apply(x,2,mean))
plot2<-ggplot(data=data, aes(x = x))+geom_histogram(aes(y=..density..),bins=20,colour="black", fill="white") +geom_density(alpha=.2, fill="#000000")
y<-dnorm(x,0,9)
z<-function(x){
y<-dnorm(x,0,9)
return(y)
}
plot2+stat_function(fun=z)
stat_function(fun=z)
ggplot(aes(x=c(-10,10)))+stat_function(fun=z)
ggplot()+stat_function(fun=z)
ggplot()+stat_function(aes(x=-10:10),fun=z)
z<-function(x){
y<-dnorm(x,0,9/10)
return(y)
}
plot2+stat_function(fun=z)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/USER/Desktop/Basic_Probability/law_of_large_number')
