start <- c(coefs_mean[-1L], gammas)
print(start)
#####
ans <- olr_cpm.fit(x, y, wt, start, offset, method, hessian = Hess,
...)
beta <- ans$coefficients
zeta <- ans$zeta
deviance <- ans$deviance
res <- ans$res
niter <- c(f.evals = res$counts[1L], g.evals = res$counts[2L])
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta), , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fit <- list(coefficients = beta, zeta = zeta, deviance = deviance,
fitted.values = fitted, lev = lev, terms = Terms, df.residual = sum(wt) -
pc - q, edf = pc + q, n = sum(wt), nobs = sum(wt),
call = match.call(), method = method, convergence = res$convergence,
niter = niter, lp = eta)
if (Hess) {
dn <- c(names(beta), names(zeta))
H <- res$hessian
dimnames(H) <- list(dn, dn)
fit$Hessian <- H
}
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
class(fit) <- "polr"
fit
}
cpm <- olr_cpm_reuse(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data)
cpm$coefficients
cpm$zeta
y <- predict(cpm)
table(data$LTR.rating.categories,y,dnn = c("real","predict")) %>%  confusionMatrix()
cpm$coefficients
cpm$zeta
y <- data$LTR.rating.categories %>% levels()
y <- data$LTR.rating.categories %>% levels() %>% unclass()
y
y <- data$LTR.rating.categories  %>% unclass() %>% levels()
t
y
y <- data$LTR.rating.categories  %>% unclass() %>% max()
y <- data$LTR.rating.categories  %>% unclass()
(table(y)/length(y))
unique(y)
unique(y) %>% order()
unique(y) %>% sort()
table(y)
table(y) %>% length()
cpm <- olr_cpm_weight(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data)
olr_cpm_weight <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
if (!is.factor(y))
stop("response must be a factor")
lev <- levels(y)
llev <- length(lev)
if (llev <= 2L)
stop("response must have 3 or more levels")
y <- unclass(y)
q <- llev - 1L
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(nrow = max(y),ncol = ncol(X))
has_y <- unique(y) %>% sort()
for(i in 1:length(unique(y))){
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
fit <- switch(method, logistic = glm.fit(X, w, wt,
family = binomial(), offset = offset), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
coefs[i,] <- fit$coefficients
}
logit <- function(p) log(p/(1 - p))
spacing <- logit((1L:q)/(q + 1L))
if (method != "logistic")
spacing <- spacing/1.7
coefs_mean <- (table(y)/length(y))%*%as.matrix(coefs)
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
start <- c(coefs_mean[-1L], gammas)
#####
ans <- olr_cpm.fit(x, y, wt, start, offset, method, hessian = Hess,
...)
beta <- ans$coefficients
zeta <- ans$zeta
deviance <- ans$deviance
res <- ans$res
niter <- c(f.evals = res$counts[1L], g.evals = res$counts[2L])
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta), , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fit <- list(coefficients = beta, zeta = zeta, deviance = deviance,
fitted.values = fitted, lev = lev, terms = Terms, df.residual = sum(wt) -
pc - q, edf = pc + q, n = sum(wt), nobs = sum(wt),
call = match.call(), method = method, convergence = res$convergence,
niter = niter, lp = eta)
if (Hess) {
dn <- c(names(beta), names(zeta))
H <- res$hessian
dimnames(H) <- list(dn, dn)
fit$Hessian <- H
}
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
class(fit) <- "polr"
fit
}
cpm <- olr_cpm_weight(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data)
olr_cpm_weight <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
if (!is.factor(y))
stop("response must be a factor")
lev <- levels(y)
llev <- length(lev)
if (llev <= 2L)
stop("response must have 3 or more levels")
y <- unclass(y)
q <- llev - 1L
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(nrow = max(y),ncol = ncol(X))
has_y <- unique(y) %>% sort()
for(i in 1:length(unique(y))){
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
fit <- switch(method, logistic = glm.fit(X, w, wt,
family = binomial(), offset = offset), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
coefs[i,] <- fit$coefficients
}
logit <- function(p) log(p/(1 - p))
spacing <- logit((1L:q)/(q + 1L))
if (method != "logistic")
spacing <- spacing/1.7
coefs_mean <- (table(y)/length(y))%*%as.matrix(coefs)
print((table(y)/length(y)))
print(as.matrix(coefs))
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
start <- c(coefs_mean[-1L], gammas)
#####
ans <- olr_cpm.fit(x, y, wt, start, offset, method, hessian = Hess,
...)
beta <- ans$coefficients
zeta <- ans$zeta
deviance <- ans$deviance
res <- ans$res
niter <- c(f.evals = res$counts[1L], g.evals = res$counts[2L])
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta), , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fit <- list(coefficients = beta, zeta = zeta, deviance = deviance,
fitted.values = fitted, lev = lev, terms = Terms, df.residual = sum(wt) -
pc - q, edf = pc + q, n = sum(wt), nobs = sum(wt),
call = match.call(), method = method, convergence = res$convergence,
niter = niter, lp = eta)
if (Hess) {
dn <- c(names(beta), names(zeta))
H <- res$hessian
dimnames(H) <- list(dn, dn)
fit$Hessian <- H
}
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
class(fit) <- "polr"
fit
}
cpm <- olr_cpm_weight(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data)
olr_cpm_weight <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
if (!is.factor(y))
stop("response must be a factor")
lev <- levels(y)
llev <- length(lev)
if (llev <= 2L)
stop("response must have 3 or more levels")
y <- unclass(y)
q <- llev - 1L
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(nrow = max(y),ncol = ncol(X))
has_y <- unique(y) %>% sort()
for(i in 1:length(unique(y))){
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
fit <- switch(method, logistic = glm.fit(X, w, wt,
family = binomial(), offset = offset), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
coefs[i,] <- fit$coefficients
}
logit <- function(p) log(p/(1 - p))
spacing <- logit((1L:q)/(q + 1L))
if (method != "logistic")
spacing <- spacing/1.7
print((table(y)/length(y)))
print(as.matrix(coefs))
coefs_mean <- (table(y)/length(y))%*%as.matrix(coefs)
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
start <- c(coefs_mean[-1L], gammas)
#####
ans <- olr_cpm.fit(x, y, wt, start, offset, method, hessian = Hess,
...)
beta <- ans$coefficients
zeta <- ans$zeta
deviance <- ans$deviance
res <- ans$res
niter <- c(f.evals = res$counts[1L], g.evals = res$counts[2L])
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta), , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fit <- list(coefficients = beta, zeta = zeta, deviance = deviance,
fitted.values = fitted, lev = lev, terms = Terms, df.residual = sum(wt) -
pc - q, edf = pc + q, n = sum(wt), nobs = sum(wt),
call = match.call(), method = method, convergence = res$convergence,
niter = niter, lp = eta)
if (Hess) {
dn <- c(names(beta), names(zeta))
H <- res$hessian
dimnames(H) <- list(dn, dn)
fit$Hessian <- H
}
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
class(fit) <- "polr"
fit
}
cpm <- olr_cpm_weight(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data)
length(unique(y))
i <- 1
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
has_y <- unique(y) %>% sort()
coefs <- matrix(nrow = max(y),ncol = ncol(X))
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
fit <- switch(method, logistic = glm.fit(X, w, wt,
family = binomial(), offset = offset), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
method <- "logistic"
for(i in 1:length(unique(y))){
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
fit <- switch(method, logistic = glm.fit(X, w, wt,
family = binomial(), offset = offset), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
coefs[i,] <- fit$coefficients
}
fit <- switch(method, logistic = glm.fit(X, w,
family = binomial()), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
coefs <- matrix(nrow = max(y),ncol = ncol(X))
has_y <- unique(y) %>% sort()
method <- "logistic"
for(i in 1:length(unique(y))){
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
fit <- switch(method, logistic = glm.fit(X, w,
family = binomial()), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
coefs[i,] <- fit$coefficients
}
View(coefs)
coefs <- matrix(nrow = length(unique(y),ncol = ncol(X))
)
coefs <- matrix(nrow = length(unique(y)),ncol = ncol(X))
olr_cpm_weight <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
if (!is.factor(y))
stop("response must be a factor")
lev <- levels(y)
llev <- length(lev)
if (llev <= 2L)
stop("response must have 3 or more levels")
y <- unclass(y)
q <- llev - 1L
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(nrow = length(unique(y)),ncol = ncol(X))
has_y <- unique(y) %>% sort()
for(i in 1:length(unique(y))){
w <- if(has_y[i]==max(y)) as.numeric(y >= has_y[i]) else as.numeric(y >  has_y[i])
fit <- switch(method, logistic = glm.fit(X, w, wt,
family = binomial(), offset = offset), probit = glm.fit(X,
w, wt, family = binomial("probit"), offset = offset),
loglog = glm.fit(X, w, wt, family = binomial("probit"),
offset = offset), cloglog = glm.fit(X, w, wt,
family = binomial("probit"), offset = offset),
cauchit = glm.fit(X, w, wt, family = binomial("cauchit"),
offset = offset))
coefs[i,] <- fit$coefficients
}
logit <- function(p) log(p/(1 - p))
spacing <- logit((1L:q)/(q + 1L))
if (method != "logistic")
spacing <- spacing/1.7
print((table(y)/length(y)))
print(as.matrix(coefs))
coefs_mean <- (table(y)/length(y))%*%as.matrix(coefs)
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
start <- c(coefs_mean[-1L], gammas)
#####
ans <- olr_cpm.fit(x, y, wt, start, offset, method, hessian = Hess,
...)
beta <- ans$coefficients
zeta <- ans$zeta
deviance <- ans$deviance
res <- ans$res
niter <- c(f.evals = res$counts[1L], g.evals = res$counts[2L])
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta), , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fit <- list(coefficients = beta, zeta = zeta, deviance = deviance,
fitted.values = fitted, lev = lev, terms = Terms, df.residual = sum(wt) -
pc - q, edf = pc + q, n = sum(wt), nobs = sum(wt),
call = match.call(), method = method, convergence = res$convergence,
niter = niter, lp = eta)
if (Hess) {
dn <- c(names(beta), names(zeta))
H <- res$hessian
dimnames(H) <- list(dn, dn)
fit$Hessian <- H
}
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
class(fit) <- "polr"
fit
}
cpm <- olr_cpm_weight(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data)
cpm$coefficients
cpm$zeta
y <- predict(cpm)
table(data$LTR.rating.categories,y,dnn = c("real","predict")) %>%  confusionMatrix()
