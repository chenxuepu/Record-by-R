if(j!=7) gammas[(j+1):q] <- gammas[j]+gammas[(j+1):q]
}
gammas
for(j in 1:q){
w <- (y <= j)
mle <- function(zeta){
sum(w == (eta <= zeta))
}
res <- optim(gammas[j], mle, method="L-BFGS-B",lower = gammas[j-1])
gammas[j] <- res$par
if(j!=7) gammas[(j+1):q] <- gammas[j]+gammas[(j+1):q]
}
gammas
(eta <= zeta)
sum(eta <= zeta)
gammas[1-1]
j <- 1
res <- optim(gammas[j], mle, method="L-BFGS-B",lower = gammas[j-1])
res
gammas[j]
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
gammas[j]
res <- optim(gammas[j], mle, method="L-BFGS-B",lower = gammas[j-1])
res
for(j in 1:q){
w <- (y <= j)
mle <- function(zeta){
sum(w == (eta <= zeta))
}
res <- optim(gammas[j], mle, method="L-BFGS-B",lower = gammas[j-1])
gammas[j] <- res$par
if(j!=7& gammas[j] > 0) gammas[(j+1):q] <- gammas[j]+gammas[(j+1):q]
}
gammas
olr_cpm_2 <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
if (!is.factor(y))
stop("response must be a factor")
lev <- levels(y)
llev <- length(lev)
if (llev <= 2L)
stop("response must have 3 or more levels")
y <- unclass(y)
q <- llev - 1L
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(ncol = ncol(X))  %>% as.data.frame()
for(i in 1:n){
w <- if(y[i]==max(y)) as.numeric(y >= y[i]) else as.numeric(y >  y[i])
fit <- switch(method, logistic = glm.fit(X[-i,], w[-i], wt[-i],
family = binomial(), offset = offset[-i]), probit = glm.fit(X[-i,],
w[-i], wt[-i], family = binomial("probit"), offset = offset[-i]),
loglog = glm.fit(X[-i,], w[-i], wt[-i], family = binomial("probit"),
offset = offset[-i]), cloglog = glm.fit(X[-i,], w[-i], wt[-i],
family = binomial("probit"), offset = offset[-i]),
cauchit = glm.fit(X[-i,], w[-i], wt[-i], family = binomial("cauchit"),
offset = offset[-i]))
coefs[i,] <- fit$coefficients
}
coefs_mean <- colMeans(coefs,na.rm = T)
beta <- coefs_mean[-1L]
logit <- function(p) log(p/(1 - p))
spacing <- logit((1L:q)/(q + 1L))
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
#####
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
for(j in 1:q){
w <- (y <= j)
mle <- function(zeta){
sum(w == (eta <= zeta))
}
res <- optim(gammas[j], mle, method="L-BFGS-B",lower = gammas[j-1])
gammas[j] <- res$par
if(j!=7& gammas[j] > 0) gammas[(j+1):q] <- gammas[j]+gammas[(j+1):q]
}
zeta <- gammas
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta), , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fit <- list(coefficients = beta, zeta = zeta,
fitted.values = fitted, lev = lev, terms = Terms, df.residual = sum(wt) -
pc - q, edf = pc + q, n = sum(wt), nobs = sum(wt),
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
class(fit) <- "polr"
fit
}
cpm <- olr_cpm_2(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data, method = "logistic")
cpm$coefficients
cpm$zeta
y <- predict(cpm)
table(data$LTR.rating.categories,y,dnn = c("real","predict")) %>%  confusionMatrix()
predict.plor
View(predict())
View(predict
)
cpm$fit
zeta <- cpm$zeta
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta),n , q)
cumpr
zeta
eta[1:10]
matrix(zeta, n, q, byrow = TRUE)
matrix(zeta, n, q, byrow = TRUE) -
eta
pfun
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta),n , q)
cumpr
exp(-1)
exp(-Inf)
exp(Inf)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
mle <-  function(zeta){
if(j == 1){
p <- pfun(zeta-eta)
}else{
p <- pfun(gammas[j-1]+exp(zeta)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(j in 1:q){
w <- (y <= j)
res <- optim(gammas[j], mle, method="BFGS")
gammas[j] <- res$par
}
gammas
pfun
p <- pfun(zeta-eta)
p
-sum(w*p+(1-w)*(1-p))
is.na(eta)
is.na(eta) %>% which()
is.na(p) %>% which()
table(w)
w <- (y <= j)
y <- unclass(y)
w <- (y <= j)
-sum(w*p+(1-w)*(1-p))
for(j in 1:q){
w <- (y <= j)
res <- optim(gammas[j], mle, method="BFGS")
gammas[j] <- res$par
}
gammas
for(j in 1:q){
w <- (y <= j)
res <- optim(gammas[j], mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
gammas[j] <- gammas[j-1]+exp(res$par)
}
}
gammas
mle <-  function(zeta){
if(j == 1){
p <- pfun(zeta-eta)
}else{
p <- pfun(gammas[j-1]+exp(zeta)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(j in 1:q){
w <- (y <= j)
res <- optim(gammas[j], mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
gammas[j] <- gammas[j-1]+exp(res$par)
}
}
gammas
spacing <- logit((1L:q)/(q + 1L))
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
gammas
for(j in 1:q){
w <- (y <= j)
res <- optim(gammas[j], mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
gammas[j] <- gammas[j-1]+exp(res$par)
}
}
gammas
eta[1:10]
p <- pfun(zeta-eta)
zeta <- 0
p <- pfun(zeta-eta)
p[1:10]
-sum(w*p+(1-w)*(1-p))
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
gammas[j] <- gammas[j-1]+exp(res$par)
}
}
gammas
exp(0)
zeta <-  1629.12
p <- pfun(zeta-eta)
p[1:10]
-sum(w*p+(1-w)*(1-p))
table(w)
j
table(y)
y <- data$LTR.rating.categories
y <- unclass(y)
table(y)
w <- (y <= j)
w
table(w)
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
gammas[j] <- gammas[j-1]+exp(res$par)
}
}
gammas
p <- pfun(zeta-eta)
p
gammas
j <- 1
w <- (y <= j)
table(w)
p <- pfun(zeta-eta)
-sum(w*p+(1-w)*(1-p))
p
table(1-w)
table(w)
zeta <- 0
p <- pfun(zeta-eta)
-sum(w*p+(1-w)*(1-p))
zeta <- 01
p <- pfun(zeta-eta)
-sum(w*p+(1-w)*(1-p))
View(glm.fit)
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
gammas[j] <- gammas[j-1]+exp(res$par)
}
}
gammas
eta
pnorm(0)
zeta-eta
(zeta-eta)[1:10]
pfun(zeta-eta)[1:10]
p <- pfun(zeta-eta)
w*p
w*p[1:10]
(w*p)[1:10]
which(w==0)[1:10]
which(w==0)[40:50]
(w*p)[41:50]
y[41:50]
j
(1-p)[1:10]
(1-p)[41:50]
(1-w)*(1-p)[41:50]
((1-w)*(1-p))[41:50]
res <- optim(0, mle, method="BFGS")
res
mle <-  function(zeta){
# if(j == 1){
#   p <- pfun(zeta-eta)
# }else{
#   p <- pfun(gammas[j-1]+exp(zeta)-eta)
# }
p <- pfun(zeta-eta)
-sum(w*p+(1-w)*(1-p))
}
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
gammas[j] <- gammas[j-1]+exp(res$par)
}
}
gammas
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
# gammas[j] <- gammas[j-1]+exp(res$par)
gammas[j] <- res$par
}
}
gammas
mle <-  function(zeta){
# if(j == 1){
#   p <- pfun(zeta-eta)
# }else{
#   p <- pfun(gammas[j-1]+exp(zeta)-eta)
# }
p <- pfun(zeta-eta)
sum(w*p+(1-w)*(1-p))
}
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
if(j==1){
gammas[j] <- res$par
}else{
# gammas[j] <- gammas[j-1]+exp(res$par)
gammas[j] <- res$par
}
}
gammas
zeta <- gammas
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta),n , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fitted
cumpr
gammas
mle <-  function(zeta){
# if(j == 1){
#   p <- pfun(zeta-eta)
# }else{
#   p <- pfun(gammas[j-1]+exp(zeta)-eta)
# }
p <- pfun(zeta-eta)
-sum(w*p+(1-w)*(1-p))
}
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
gammas[j] <- res$par
# if(j==1){
#   gammas[j] <- res$par
# }else{
#   # gammas[j] <- gammas[j-1]+exp(res$par)
#   gammas[j] <- res$par
# }
}
zeta <- gammas
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta),n , q)
cumpr[1:10,]
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
fitted[1:10]
dimnames(fitted) <- list(row.names(m), lev)
fitted[1:10,]
olr_cpm_2 <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
if (!is.factor(y))
stop("response must be a factor")
lev <- levels(y)
llev <- length(lev)
if (llev <= 2L)
stop("response must have 3 or more levels")
y <- unclass(y)
q <- llev - 1L
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(ncol = ncol(X))  %>% as.data.frame()
for(i in 1:n){
w <- if(y[i]==max(y)) as.numeric(y >= y[i]) else as.numeric(y >  y[i])
fit <- switch(method, logistic = glm.fit(X[-i,], w[-i], wt[-i],
family = binomial(), offset = offset[-i]), probit = glm.fit(X[-i,],
w[-i], wt[-i], family = binomial("probit"), offset = offset[-i]),
loglog = glm.fit(X[-i,], w[-i], wt[-i], family = binomial("probit"),
offset = offset[-i]), cloglog = glm.fit(X[-i,], w[-i], wt[-i],
family = binomial("probit"), offset = offset[-i]),
cauchit = glm.fit(X[-i,], w[-i], wt[-i], family = binomial("cauchit"),
offset = offset[-i]))
coefs[i,] <- fit$coefficients
}
coefs_mean <- colMeans(coefs,na.rm = T)
beta <- coefs_mean[-1L]
logit <- function(p) log(p/(1 - p))
spacing <- logit((1L:q)/(q + 1L))
gammas <- -coefs_mean[1L] + spacing - spacing[llev%/%2L]
#####
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
mle <-  function(zeta){
# if(j == 1){
#   p <- pfun(zeta-eta)
# }else{
#   p <- pfun(gammas[j-1]+exp(zeta)-eta)
# }
p <- pfun(zeta-eta)
-sum(w*p+(1-w)*(1-p))
}
for(j in 1:q){
w <- (y <= j)
res <- optim(0, mle, method="BFGS")
gammas[j] <- res$par
# if(j==1){
#   gammas[j] <- res$par
# }else{
#   # gammas[j] <- gammas[j-1]+exp(res$par)
#   gammas[j] <- res$par
# }
}
zeta <- gammas
cumpr <- matrix(pfun(matrix(zeta, n, q, byrow = TRUE) -
eta),n , q)
fitted <- t(apply(cumpr, 1L, function(x) diff(c(0, x, 1))))
dimnames(fitted) <- list(row.names(m), lev)
fit <- list(coefficients = beta, zeta = zeta,
fitted.values = fitted, lev = lev, terms = Terms, df.residual = sum(wt) -
pc - q, edf = pc + q, n = sum(wt), nobs = sum(wt),
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
class(fit) <- "polr"
fit
}
cpm <- olr_cpm_2(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data, method = "logistic")
cpm$coefficients
cpm$zeta
y <- predict(cpm)
table(data$LTR.rating.categories,y,dnn = c("real","predict")) %>%  confusionMatrix()
cpm <- olr_cpm_2(LTR.rating.categories~ IC + OM + TDL + DP + MBA + RDA + REA + CEA + CBA + TA + beta + sigma + size +  S.P.500.return,data = data, method = "probit")
cpm$coefficients
cpm$zeta
y <- predict(cpm)
table(data$LTR.rating.categories,y,dnn = c("real","predict")) %>%  confusionMatrix()
