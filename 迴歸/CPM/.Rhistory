p <- pfun(zeta-eta)
}else{
p <- pfun(h_fun$eta[i-1]+log(exp(zeta)+1)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(i in 1:nrow(h_fun)){
w <- (y <= h_fun$y[i])
res <- optim(0, mle, method="BFGS")
if(i == 1){
h_fun$eta[i] <- res$par
}else{
h_fun$eta[i] <- h_fun$eta[i-1]+log(exp(res$par)+1)
}
}
fit <- list(coefficients = beta, h_fun = h_fun, n = sum(wt), nobs = sum(wt), terms = Terms,
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
fit
}
cpm <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(ncol = ncol(X))  %>% as.data.frame()
for(i in 1:n){
w <- if(y[i]==1) as.numeric(y >= 1) else as.numeric(y >  y[i])
fit <- switch(method, logistic = glm.fit(X[-i,], w[-i], wt[-i],
family = binomial(), offset = offset[-i]), probit = glm.fit(X[-i,],
w[-i], wt[-i], family = binomial("probit"), offset = offset[-i]),
loglog = glm.fit(X[-i,], w[-i], wt[-i], family = binomial("probit"),
offset = offset[-i]), cloglog = glm.fit(X[-i,], w[-i], wt[-i],
family = binomial("probit"), offset = offset[-i]),
cauchit = glm.fit(X[-i,], w[-i], wt[-i], family = binomial("cauchit"),
offset = offset[-i]))
coefs[i,] <- fit$coefficients
}
coefs_mean <- colMeans(coefs,na.rm = T)
beta <- coefs_mean[-1L]
names(beta) <- colnames(x)
h_fun <- data.frame(y=seq(0,1,0.001),eta = NA)
#####
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
mle <-  function(zeta){
if(i==1){
p <- pfun(zeta-eta)
}else{
p <- pfun(h_fun$eta[i-1]+log(exp(zeta)+1)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(i in 1:nrow(h_fun)){
w <- (y <= h_fun$y[i])
res <- optim(0, mle, method="BFGS")
if(i == 1){
h_fun$eta[i] <- res$par
}else{
h_fun$eta[i] <- h_fun$eta[i-1]+log(exp(res$par)+1)
}
}
fit <- list(coefs = coefs ,coefficients = beta, h_fun = h_fun, n = sum(wt), nobs = sum(wt), terms = Terms,
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
fit
}
test<-cpm(LGD~.-Instrument.ID-Date.of.Obligor.Default,data = data_in)
test$coefficients
test$h_fun
plot(test$h_fun$eta,test$h_fun$y,type = "l")
test2<-cpm(LGD~.-Instrument.ID-Date.of.Obligor.Default,data = data_in)
cpm <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(ncol = ncol(X))  %>% as.data.frame()
mle2 <- function(coef){
p <- pfun(coef %*% X[-i,])
-sum(w[-i]*p+(1-w[-i])*(1-p))
}
for(i in 1:n){
w <- if(y[i]==1) as.numeric(y < 1) else as.numeric(y <=  y[i])
res <- optim(rep(0,ncol(X)), mle, method="BFGS")
coefs[i,] <- res$par
}
coefs_mean <- colMeans(coefs,na.rm = T)
beta <- coefs_mean[-1L]
names(beta) <- colnames(x)
h_fun <- data.frame(y=seq(0,1,0.001),eta = NA)
#####
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
mle <-  function(zeta){
if(i==1){
p <- pfun(zeta-eta)
}else{
p <- pfun(h_fun$eta[i-1]+log(exp(zeta)+1)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(i in 1:nrow(h_fun)){
w <- (y <= h_fun$y[i])
res <- optim(0, mle, method="BFGS")
if(i == 1){
h_fun$eta[i] <- res$par
}else{
h_fun$eta[i] <- h_fun$eta[i-1]+log(exp(res$par)+1)
}
}
fit <- list(coefs = coefs ,coefficients = beta, h_fun = h_fun, n = sum(wt), nobs = sum(wt), terms = Terms,
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
fit
}
test2<-cpm(LGD~.-Instrument.ID-Date.of.Obligor.Default,data = data_in)
cpm <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(ncol = ncol(X))  %>% as.data.frame()
mle2 <- function(coef){
p <- pfun(coef %*% X[-i,])
-sum(w[-i]*p+(1-w[-i])*(1-p))
}
for(i in 1:n){
w <- if(y[i]==1) as.numeric(y < 1) else as.numeric(y <=  y[i])
res <- optim(rep(0,ncol(X)), mle2, method="BFGS")
coefs[i,] <- res$par
}
coefs_mean <- colMeans(coefs,na.rm = T)
beta <- coefs_mean[-1L]
names(beta) <- colnames(x)
h_fun <- data.frame(y=seq(0,1,0.001),eta = NA)
#####
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
mle <-  function(zeta){
if(i==1){
p <- pfun(zeta-eta)
}else{
p <- pfun(h_fun$eta[i-1]+log(exp(zeta)+1)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(i in 1:nrow(h_fun)){
w <- (y <= h_fun$y[i])
res <- optim(0, mle, method="BFGS")
if(i == 1){
h_fun$eta[i] <- res$par
}else{
h_fun$eta[i] <- h_fun$eta[i-1]+log(exp(res$par)+1)
}
}
fit <- list(coefs = coefs ,coefficients = beta, h_fun = h_fun, n = sum(wt), nobs = sum(wt), terms = Terms,
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
fit
}
test2<-cpm(LGD~.-Instrument.ID-Date.of.Obligor.Default,data = data_in)
cpm <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(ncol = ncol(X))  %>% as.data.frame()
mle2 <- function(coef){
p <- pfun(coef %*% X[-i,])
-sum(w[-i]*p+(1-w[-i])*(1-p))
}
for(i in 1:n){
w <- if(y[i]==1) as.numeric(y < 1) else as.numeric(y <=  y[i])
res <- optim(rep(0,ncol(X)), mle2, method="BFGS")
coefs[i,] <- res$par
}
coefs_mean <- colMeans(coefs,na.rm = T)
beta <- coefs_mean[-1L]
names(beta) <- colnames(x)
h_fun <- data.frame(y=seq(0,1,0.001),eta = NA)
#####
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
mle <-  function(zeta){
if(i==1){
p <- pfun(zeta-eta)
}else{
p <- pfun(h_fun$eta[i-1]+log(exp(zeta)+1)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(i in 1:nrow(h_fun)){
w <- (y <= h_fun$y[i])
res <- optim(0, mle, method="BFGS")
if(i == 1){
h_fun$eta[i] <- res$par
}else{
h_fun$eta[i] <- h_fun$eta[i-1]+log(exp(res$par)+1)
}
}
fit <- list(coefs = coefs ,coefficients = beta, h_fun = h_fun, n = sum(wt), nobs = sum(wt), terms = Terms,
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
fit
}
test2<-cpm(LGD~.-Instrument.ID-Date.of.Obligor.Default,data = data_in)
cpm <- function (formula, data, weights, start, ..., subset, na.action,
contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic",
"probit", "loglog", "cloglog", "cauchit"))
{
m <- match.call(expand.dots = FALSE)
method <- match.arg(method)
if (is.matrix(eval.parent(m$data)))
m$data <- as.data.frame(data)
m$start <- m$Hess <- m$method <- m$model <- m$... <- NULL
m[[1L]] <- quote(stats::model.frame)
m <- eval.parent(m)
Terms <- attr(m, "terms")
x <- model.matrix(Terms, m, contrasts)
xint <- match("(Intercept)", colnames(x), nomatch = 0L)
n <- nrow(x)
pc <- ncol(x)
cons <- attr(x, "contrasts")
if (xint > 0L) {
x <- x[, -xint, drop = FALSE]
pc <- pc - 1L
}
else warning("an intercept is needed and assumed")
wt <- model.weights(m)
if (!length(wt))
wt <- rep(1, n)
offset <- model.offset(m)
if (length(offset) <= 1L)
offset <- rep(0, n)
y <- model.response(m)
pfun <- switch(method, logistic = plogis, probit = pnorm,
loglog = pgumbel, cloglog = pGumbel, cauchit = pcauchy)
#####
X <- cbind(Intercept = rep(1, n), x)
coefs <- matrix(ncol = ncol(X))  %>% as.data.frame()
mle2 <- function(coef){
p <- pfun(X[-i,] %*% coef)
-sum(w[-i]*p+(1-w[-i])*(1-p))
}
for(i in 1:n){
w <- if(y[i]==1) as.numeric(y < 1) else as.numeric(y <=  y[i])
res <- optim(rep(0,ncol(X)), mle2, method="BFGS")
coefs[i,] <- res$par
}
coefs_mean <- colMeans(coefs,na.rm = T)
beta <- coefs_mean[-1L]
names(beta) <- colnames(x)
h_fun <- data.frame(y=seq(0,1,0.001),eta = NA)
#####
eta <- if (pc)
offset + drop(x %*% beta)
else offset + rep(0, n)
mle <-  function(zeta){
if(i==1){
p <- pfun(zeta-eta)
}else{
p <- pfun(h_fun$eta[i-1]+log(exp(zeta)+1)-eta)
}
-sum(w*p+(1-w)*(1-p))
}
for(i in 1:nrow(h_fun)){
w <- (y <= h_fun$y[i])
res <- optim(0, mle, method="BFGS")
if(i == 1){
h_fun$eta[i] <- res$par
}else{
h_fun$eta[i] <- h_fun$eta[i-1]+log(exp(res$par)+1)
}
}
fit <- list(coefs = coefs ,coefficients = beta, h_fun = h_fun, n = sum(wt), nobs = sum(wt), terms = Terms,
call = match.call(), method = method,
lp = eta)
if (model)
fit$model <- m
fit$na.action <- attr(m, "na.action")
fit$contrasts <- cons
fit$xlevels <- .getXlevels(Terms, m)
fit
}
test2<-cpm(LGD~.-Instrument.ID-Date.of.Obligor.Default,data = data_in)
test2$coefficients
test2$h_fun
plot(test2$h_fun$eta,test2$h_fun$y,type = "l")
View(test2)
View(test)
test2$coefs[1:10,]
test$coefs[1:10,]
predict.cpm <- function(object, newdata){
eta <- drop(object$coefficients %*% as.matrix(newdata))
y <- rep(NA,length(eta))
for(i in 1:length(eta)){
test <- object$h_fun$eta>eta[i]
if(any(test)){
y[i] <- object$h_fun$y[which(test)[1]-1]
}else{
y[i] <- 1
}
}
y
}
y_hat <- predict.cpm(test,data_in[,4:15])
predict.cpm <- function(object, newdata){
eta <- drop(as.matrix(newdata) %*% object$coefficients)
y <- rep(NA,length(eta))
for(i in 1:length(eta)){
test <- object$h_fun$eta>eta[i]
if(any(test)){
y[i] <- object$h_fun$y[which(test)[1]-1]
}else{
y[i] <- 1
}
}
y
}
y_hat <- predict.cpm(test,data_in[,4:15])
object <- test
newdata <- data_in[,4:15]
eta <- drop(as.matrix(newdata) %*% object$coefficients)
y <- rep(NA,length(eta))
for(i in 1:length(eta)){
test <- object$h_fun$eta>eta[i]
if(any(test)){
y[i] <- object$h_fun$y[which(test)[1]-1]
}else{
y[i] <- 1
}
}
test <- object$h_fun$eta>eta[i]
test
eta[1]
object$h_fun$eta
View(data_in)
eta
View(data_in)
predict.cpm <- function(object, newdata){
eta <- drop(as.matrix(newdata) %*% object$coefficients)
y <- rep(NA,length(eta))
for(i in 1:length(eta)){
test <- object$h_fun$eta>eta[i]
if(any(test)){
y[i] <- object$h_fun$y[ifelse(which(test)[1]==1,which(test)[1],which(test)[1]-1)]
}else{
y[i] <- 1
}
}
y
}
y_hat <- predict.cpm(test,data_in[,4:15])
for(i in 1:length(eta)){
test <- object$h_fun$eta>eta[i]
if(any(test)){
y[i] <- object$h_fun$y[ifelse(which(test)[1]==1,which(test)[1],which(test)[1]-1)]
}else{
y[i] <- 1
}
}
y
y_hat <- predict.cpm(test,data_in[,4:15])
table(data_in$LGD,y,dnn = c("real","predict")) %>%  confusionMatrix()
LGD <- ifelse(data_in$LGD<1&data_in$LGD>0,"0-1",data_in$LGD)
y2 <- ifelse(y<1&y>0,"0-1",y)
table(LGD,y2,dnn = c("real","predict")) %>%  confusionMatrix()
table(LGD)
table(y2)
table(LGD,y2,dnn = c("real","predict"))
